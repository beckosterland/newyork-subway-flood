#New York City Subway & Climate Change

###Imports and Installs

#IMPORTS AND INSTALLS
#Getting access to my drive
from google.colab import drive
drive.mount("/content/drive")
import sys
sys.path.append('/content/drive/My Drive/Final project/output')
import csv

#install rtree
!apt-get install -y libspatialindex-dev
!pip install rtree
import rtree

#import pandas
import pandas as pd

#install and import fiona
!pip install fiona
import fiona

#install and import geopandas
!pip install geopandas
import geopandas as gpd
from geopandas import GeoSeries


#install and import shapely
!pip install shapely
import shapely as shp

#import matplotlib.pyplot
import matplotlib.pyplot as plt

#import point and ploygon function to create geometry with 
from shapely.geometry import Point
from shapely.geometry import Polygon

#import numpy
import numpy as np

#New York City Subway Station Entrances Dataframe

#Using Pandas, read in csv file from copied URL
entrancesTemp =  pd.read_csv('https://data.ny.gov/api/views/i9wp-a4ja/rows.csv?accessType=DOWNLOAD&sorting=true')

#Keep only the desired variables (columns)
entrancesTemp = entrancesTemp[['Line','Station Name','Station Latitude',
                                   'Station Longitude','Entrance Type','ADA',
                                   'North South Street','East West Street',
                                   'Corner','Entrance Latitude','Entrance Longitude']]

#Change column header names so there are no spaces
#Point geometry function did not work with spaces in header name
#inplace = True makes the changes concrete
entrancesTemp.rename(columns={'Station Latitude':'S_Lat','Station Longitude':'S_Long',
                                'Entrance Latitude':'E_Lat','Entrance Longitude':'E_Long',
                              'Station Name':'S_name', 'North South Street': 'NS', 
                              'East West Street':'EW'},
                                 inplace=True)

#Error in the data file where the Entrance Longitude of row 648 is positive instead of negative2
entrancesTemp.iloc[648,10] = entrancesTemp.iloc[648,10]*(-1)

#Adding **Station** Location geometry to entrancesTemp dataframe
#Make geometry using shapely Point function
geometrystation = [Point(xy) for xy in zip(entrancesTemp.S_Long,entrancesTemp.S_Lat)]

#Make crs projection to epsg:4326; WGS 84
crs = {'init': 'epsg:4326'}

#Add geometry column to entrancesTemp
entrancesTemp = gpd.GeoDataFrame(entrancesTemp,
                                  crs=crs,
                                  geometry=geometrystation)

#Check projection
entrancesTemp.crs

entrancesTemp.head()

###Subway Station Data with Structure and Borough Info
 - Whether station is Underground or Elevated
 - Which NYC borough the station is located in
     - Manhattan (M), Brooklyn (Bk), Queens (Q), Bronx (Bx), Staten Island (SI)


#Using Pandas read csv from copid URL
station_structure = pd.read_csv('http://web.mta.info/developers/data/nyct/subway/Stations.csv')

#Keep only desired variables (columns)
station_structure = station_structure.iloc[:,[6,8,9,10]]

#Rename column headers to get rid of spaces
station_structure.rename(columns={'GTFS Latitude':'Lat','GTFS Longitude':'Long'},
                                 inplace=True)
station_structure.head()

#Adding point geometry to station_structure dataframe
#Make geometry using shapely Point function
geometry = [Point(xy) for xy in zip(station_structure.Long, station_structure.Lat)]

#Make crs projection to epsg:4326; WGS 84
crs = {'init': 'epsg:4326'}

station_structure = gpd.GeoDataFrame(station_structure,
                                crs=crs,
                                geometry=geometry)

station_structure.head()

# A plot that shows Staten Island Subway station entrances were not inlcuded 
# in the entrance data 
# Notice how there are no red points in the bottom left area of the plot
base = entrancesTemp.plot(figsize = (7,7), color= 'red')
station_structure.plot(ax = base, color = 'blue', marker = '.')

###Merge dataframes

#Merge datasets based on common Station geometry field
#Use SubwayEntrances as left dataframe so all entrance data is kept
subwayEntrances = entrancesTemp.merge(station_structure, how = 'left', on = 'geometry')
subwayEntrances.head()

#Keep only desired columns (remove geometry for stations)
subwayEntrances = subwayEntrances.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,12,13]]

#Add geometry for each entrance
geometry = [Point(xy) for xy in zip(subwayEntrances.E_Long, subwayEntrances.E_Lat)]

crs = {'init': 'epsg:4326'}

subwayEntrances = gpd.GeoDataFrame(subwayEntrances,
                                crs=crs,
                                geometry=geometry)

subwayEntrances.head()

# Create Function to change projection of any GeoDataFrame to EPSG: 2263; New York Long Island (USft)
def projection(data):
    data.to_crs({'init': 'epsg:2263'}, inplace=True)

#Call projection function
projection(subwayEntrances)
subwayEntrances.head()

##Staten Island Station Data

#Create Geodataframe of Staten Island Stations, which were not included in Entrance dataframe
#Change projection
projection(station_structure)
#Only take stations from Staten Island
statenIsland = station_structure[station_structure['Borough']=='SI']
#Plot
statenIsland.plot()
statenIsland.head()

##New York City Subway Lines

lines = gpd.read_file('https://data.cityofnewyork.us/api/geospatial/3qz8-muuu?method=export&format=Shapefile')
projection(lines)
lines.head()

lines.to_file('/content/drive/My Drive/Final project/output/lines')

##Neighborhood Tabulation Area (NTA) Shapefile

#Read in Neighborhood Tabulation Areas shapefile using Geopandas
nta = gpd.read_file('https://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile')
#Check projection
nta.crs

#Change GeoDataframe projection to EPSG: 2263; New York Long Island (USft)
projection(nta)
#Plot census tracts
nta.plot()
nta.head()

nta.to_file('/content/drive/My Drive/Final project/output/nta')

##Water Bodies Shapefile

water = gpd.read_file('/content/drive/My Drive/Final project/output/nyu-2451-34507-shapefile/nyu_2451_34507.shp')
water.plot()

#Find bounding box of nta to clip water shapefile to
minx, miny, maxx, maxy = nta.geometry.total_bounds
minx, miny, maxx, maxy

#Create polygon and geoseries to use as clip mask
p1 = Polygon([(-74.25559136315213, 40.49611539516854), (-73.70000906321046, 40.49611539516854), (-73.70000906321046, 40.9155327770052), (-74.25559136315213,40.9155327770052)])
bbox = GeoSeries([p1])
bbox.plot()

#Clip water file to box mask
#water = gpd.clip(water, g, keep_geom_type=True)
#projection(water)
#water.to_file('/content/drive/My Drive/Final project/output/waterways')

water = gpd.read_file('/content/drive/My Drive/Final project/output/waterways')
water.plot()

##Hurricane Sandy Inundation Zone Shapefile

#Read in Sandy Inundation Zone shapefile using Geopandas
#sandy = gpd.read_file('https://data.cityofnewyork.us/api/geospatial/uyj8-7rv5?method=export&format=Shapefile')
#Check projection
#sandy.crs

#Change GeoDataframe projection to EPSG: 2263; New York Long Island (USft)
#projection(sandy)

#Create list of length of geodataframe with value 1
#sandyflood = ["Yes"]*len(sandy)
#Insert this list as a new column
#sandy.insert(0,'sandyflooded', sandyflood)
#sandy = sandy.iloc[:,[0,8]]
#sandy.head()
#sandy.to_file('/content/drive/My Drive/Final project/output/sandy')

sandy = gpd.read_file('/content/drive/My Drive/Final project/output/sandy/sandy.shp')
sandy.head()

##Projected 100-year Floodplain for 2020

#Using geopandas, read in 2050 100-year floodplain from URL
#floodplain2020 = gpd.read_file('https://data.cityofnewyork.us/api/geospatial/ezfn-5dsb?method=export&format=Shapefile')

#Change projection
#projection(floodplain2020)

#Read out clipped shapefile to Drive
#floodplain2020.to_file('/content/drive/My Drive/Final project/output/floodplain2020')

#Read in 100-year 2020 floodplain from drive
flood2020 = gpd.read_file('/content/drive/My Drive/Final project/output/floodplain2020/floodplain2020.shp')
#Plot data
flood2020.plot()

#Create list of length of geodataframe with value 1
flood20 = ["Yes"]*len(flood2020)
#Insert this list as a new column
flood2020.insert(0,'2020flooded', flood20)

#Dissolve floodplain geometry to simpler object
flood2020 = flood2020.dissolve(by='2020flooded')

flood2020.head()

flood2020.to_file('/content/drive/My Drive/Final project/output/floodplain2020')

##Projected 100-Year Floodplain for 2050 Shapefile

#Using geopandas, read in 2050 100-year floodplain
#floodplain2050 = gpd.read_file('https://data.cityofnewyork.us/api/geospatial/qwca-zqw3?method=export&format=Shapefile')

#Change projection
#projection(floodplain2050)
#floodplain2050 = floodplain2050.dissolve(by='abfe_0_2pc')
#Clip Floodplain to ntas
#Because of the size of the file this process takes 20 min
#The new clipped shapefile is then written out to the drive so future processing is
#much faster

#floodplain2050 = floodplain2050[floodplain2050.geometry.intersects(nta.unary_union)]
#floodplain2050.to_file('/content/drive/My Drive/Final project/output/floodplain2050')

#Read in clipped shapefile
flood2050 = gpd.read_file('/content/drive/My Drive/Final project/output/floodplain2050/floodplain2050.shp')


#Create list of length of geodataframe with value 1
flood50 = ["Yes"]*len(flood2050)
#Insert this list as a new column
flood2050.insert(0,'2050flooded', flood50)
flood2050.plot()
flood2050.head()

flood2050 = flood2050.dissolve(by='2050flooded')

flood2050.to_file('/content/drive/My Drive/Final project/output/floodplain2050')

##Plotting all GeoDataFrames together

##Spatial Joins

#Spatial join of subway entrances in the inundation zone of Sandy
#The join is pastes the geometry and sandyflooded flag in entrance dataframe
#Use left join to keep all entrances in dataframe
subwayEntrances = gpd.sjoin(subwayEntrances, 
                            sandy[['sandyflood', 'geometry']], 
                            how='left', #To keep all the stations
                            op='within')
subwayEntrances.head()

#Changes NaN Values to No
subwayEntrances['sandyflood'] = subwayEntrances['sandyflood'].fillna("No")

#Delete or drop index_right column so next spatial join can process
subwayEntrances=subwayEntrances.drop(columns='index_right')
subwayEntrances.head()

#Spatial join of subway entrances in the 2020 floodplain
#Use left join to keep all entrances in dataframe
subwayEntrances = gpd.sjoin(subwayEntrances,flood2020[['2020flooded', 'geometry']], how='left', op='within')

#Changes NaN Values to 0
subwayEntrances['2020flooded'] = subwayEntrances['2020flooded'].fillna("No")

#Delete or drop index_right column so next spatial join can process
subwayEntrances=subwayEntrances.drop(columns='index_right')
subwayEntrances.head()

#Spatial join of subway entrances in the 2050 floodplain
#Use left join to keep all entrances in dataframe
subwayEntrances = gpd.sjoin(subwayEntrances,flood2050[['2050flooded','geometry']], how='left', op='within')

#For loop that changes non-NaN values in 2020flooded to TRUE 
#Changes NaN Values to 0
subwayEntrances['2050flooded'] = subwayEntrances['2050flooded'].fillna("No")

#Delete or drop index_right column so next spatial join can process
subwayEntrances=subwayEntrances.drop(columns='index_right')
subwayEntrances.head()

subwayEntrances.to_file('/content/drive/My Drive/Final project/output/subwayEntrances')
